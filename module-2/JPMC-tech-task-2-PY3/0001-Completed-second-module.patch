From 9d8d2612a0e58669b4c60705bf1a70e3b4c48e0c Mon Sep 17 00:00:00 2001
From: Sanchit Kalra <sanchit.kalra1@gmail.com>
Date: Wed, 11 Aug 2021 15:47:53 +0530
Subject: [PATCH] Completed second module

---
 src/App.tsx   | 31 +++++++++++++++++++++++++------
 src/Graph.tsx | 16 ++++++++++++++--
 2 files changed, 39 insertions(+), 8 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..5b4bacc 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false
     };
   }
 
@@ -29,18 +31,35 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data = {this.state.data} />)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
+        this.setState({
+          data: serverResponds,
+          showGraph: true
+        })
+      })
+      x++;
+      if (x > 1000) {
+        clearInterval(interval)
+      }
+    }, 10)
+
+    // DataStreamer.getData((serverResponds: ServerRespond[]) => {
+    //   // Update the state by creating a new array of data that consists of
+    //   // Previous data in the state and the new data from server
+    //   this.setState({ data: [...this.state.data, ...serverResponds], showGraph: true });
+    // });
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..3dfbfb1 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,19 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    // const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement
+
+    elem.setAttribute('view', 'y_line')
+    elem.setAttribute('column-pivots', '["stock"]')
+    elem.setAttribute('row-pivots', '["timestamp"]')
+    elem.setAttribute('columns', '["top_ask_price"]')
+    elem.setAttribute('aggregates', `
+      {"stock": "distinct count",
+      "top_ask_price": "avg",
+      "top_bid_price": "avg",
+      "timestamp": "distinct count" }`)
 
     const schema = {
       stock: 'string',
-- 
2.31.1

